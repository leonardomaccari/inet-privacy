
# This tests are imagined to verify the correctness of the mobility model. In the original article, the
# real mobility traces show power law behavior, compared to exponential 
# of RWP. Here we have two scenarios that output the inter-contact time
# and contact time CCPD function for a Musolesi Mobility and a 
# pseudo RWP. Run both tests and redirect the output like:
# ./run -u Cmdenv -c TestPowerLaw > STIID;
# ./run -u Cmdenv -c TestSimilRWP > RWP;
#
# then run the parse script (gnuplot needed)
#
# . parse_comparison.sh STIID RWP; evince results/STIID-RWP-*

# You will see that RWP has a steep decrease, corresponding to an exponential decay
# (graph are linear/log) while the other has a lighter, simil power-law
# behavior. Compare these graphs with the ones in Musolesi paper. Note that
# the shuffle interval determines the point at which Musolesi model
# has the final decrease in both the graphs. The more the nodes leave their
# cluster (with growing expmean) the more the mobility behaves like a 
# RWP mobility model.

[Config TestPowerLaw] 
network = MobileNetwork
description = "Pseudo deterministic without rewire, one refresh"
*.numHosts = ${nn = 30}
sim-time-limit = 3600s

# mobility
**.host*.mobilityType = "MusolesiMobility"
**.host*.mobility.recordStatistics = true
**.host*.mobility.rewiringProb = 0.1
**.host*.mobility.connectionThreshold = 0.3
**.host*.mobility.updateInterval = 50ms
**.host*.mobility.numHosts = ${nn}
**.host*.mobility.numberOfGroups = 3
**.host*.mobility.numberOfRows = 5
**.host*.mobility.numberOfColumns = 5
**.host*.mobility.maxHostSpeed = 10
**.host*.mobility.minHostSpeed = 1
**.host*.mobility.rewiringPeriod = 0s
**.host*.mobility.reshufflePeriod = 3000s
#**.host*.mobility.targetChoice = "deterministic"
**.host*.mobility.targetChoice = "pseudodeterministic"
#**.host*.mobility.targetChoice = "proportional"
**.host*.mobility.hcmm = 0.0
**.host*.mobility.drift = 0.001 
**.host*.mobility.expmean = 0.14

[Config TestSimilRWP] 
network = MobileNetwork
description = "RWP"
*.numHosts = ${nn = 30}
sim-time-limit = 3600s
# mobility
**.host*.mobilityType = "MusolesiMobility"
**.host*.mobility.RWP = true
**.host*.mobility.recordStatistics = true
**.host*.mobility.rewiringProb = 0.0  #useless
**.host*.mobility.connectionThreshold = 0.999999 #useless   
**.host*.mobility.updateInterval = 50ms  #useless 
**.host*.mobility.numHosts = ${nn} #useless
**.host*.mobility.numberOfGroups = ${nn} #useless
**.host*.mobility.numberOfRows = 15
**.host*.mobility.numberOfColumns = 15
**.host*.mobility.maxHostSpeed = 10
**.host*.mobility.minHostSpeed = 1
**.host*.mobility.rewiringPeriod = 1200s #useless
**.host*.mobility.hcmm = 0.0 #${0.5, 0} #useless

[Config TestReshuffle] 
# this test is imagined to verify that the refresh of groups works as expected
# the intended behavior is that nodes start in fixed positions, they do not move 
# up to the first update (determinstic is On ). Upon updates the groups are shuffled
# their initial cells are changed and since hcmm is high they all migrate to their 
# new group cell and stabilize there.
# check with gui that: nodes stabilize in certain positions, node groups are changed
# speed is high just to make the changes more visible

network = MobileNetwork

description = "Deterministic with reshuffle"
*.numHosts = ${nn = 30}
sim-time-limit = 1500s
repeat = 1
#debug-on-errors = true

# mobility
**.host*.mobilityType = "MusolesiMobility"
**.host*.mobility.recordStatistics = true
**.host*.mobility.rewiringProb = 0.0
**.host*.mobility.connectionThreshold = 0.9
**.host*.mobility.updateInterval = 50ms
**.host*.mobility.numHosts = ${nn}
**.host*.mobility.numberOfGroups = 6
**.host*.mobility.numberOfRows = 15
**.host*.mobility.numberOfColumns = 15
**.host*.mobility.maxHostSpeed = 20
**.host*.mobility.minHostSpeed = 10
**.host*.mobility.rewiringPeriod = 50s
**.host*.mobility.targetChoice = "deterministic"
**.host*.mobility.hcmm = 0.5 #${0.5, 0}

[Config TestReshufflePseudo] 

# this test is imagined to verify that the refresh of groups works as expected
# the intended behavior is that nodes start in fixed positions, they move from 
# a cluster to another (pseudodeterministic is on). Upon updates the groups are shuffled
# their initial cells are changed and since hcmm is high they all migrate to their 
# new group cell and almost stabilize there.
# check with gui that: clusters stabilize in certain positions, nodes keep migrating 
# from cluster to cluster. When groups are changed there is an overall reshuffle


network = MobileNetwork
description = "PseudoDeterministic with reshuffle"
*.numHosts = ${nn = 30}
sim-time-limit = 1500s

# mobility
**.host*.mobilityType = "MusolesiMobility"
**.host*.mobility.recordStatistics = true
**.host*.mobility.rewiringProb = 0.0
**.host*.mobility.connectionThreshold = 0.9
**.host*.mobility.updateInterval = 50ms
**.host*.mobility.numHosts = ${nn}
**.host*.mobility.numberOfGroups = 6
**.host*.mobility.numberOfRows = 15
**.host*.mobility.numberOfColumns = 15
**.host*.mobility.maxHostSpeed = 20
**.host*.mobility.minHostSpeed = 10
**.host*.mobility.rewiringPeriod = 100s
**.host*.mobility.targetChoice = "pseudodeterministic"
**.host*.mobility.hcmm = 0.01 #${0.5, 0}
**.host*.mobility.expmean = 30

[Config TestReshufflePostions] 
# this test is imagined to verify that the refresh of positions of groups works as expected
# the intended behavior is that nodes start in fixed positions, they do not move 
# up to the first update (determinstic is On ). Upon updates the groups are not shuffled
# but their initial cells are changed and since hcmm is high they all migrate to their 
# new group cell and stabilize there. There can be a transitory in which the groups mix.

# check with gui that: nodes stabilize in certain positions, node groups are not changed 
# but groups migrate to new poistions
# speed is high just to make the changes more visible


network = MobileNetwork
description = "Deterministic with reshuffle positions"
*.numHosts = ${nn = 30}
sim-time-limit = 1500s
# mobility
**.host*.mobilityType = "MusolesiMobility"
**.host*.mobility.recordStatistics = true
**.host*.mobility.rewiringProb = 0.0
**.host*.mobility.connectionThreshold = 0.9
**.host*.mobility.updateInterval = 50ms
**.host*.mobility.numHosts = ${nn}
**.host*.mobility.numberOfGroups = 6
**.host*.mobility.numberOfRows = 15
**.host*.mobility.numberOfColumns = 15
**.host*.mobility.maxHostSpeed = 20
**.host*.mobility.minHostSpeed = 10
**.host*.mobility.rewiringPeriod = 400s
**.host*.mobility.targetChoice = "deterministic"
**.host*.mobility.hcmm = 0.5 #${0.5, 0}
**.host*.mobility.reshufflePositionsOnly = true


# This configuration has an associated Anf that will show that:
# - every block in the network has been visited
# - each node changes block a few time in the simulation
# - overall walked space for each node
# satic nodes are there just to visually help the understanding of topology
[Config TestAreaValues]

network = MobileNetwork
description = "Collecting Area values, 20 nodes"
*.numHosts = ${nn = 20}
sim-time-limit = 3600s
#debug-on-errors = true
# mobility
**.mobility.initFromDisplayString = false

**.host[0..19].mobilityType = "MusolesiMobility"
**.host*.mobility.recordStatistics = true
**.host*.mobility.rewiringProb = 0.1
**.host*.mobility.connectionThreshold = 0.3
**.host*.mobility.updateInterval = 500ms
**.host*.mobility.numHosts = 20
**.host*.mobility.numberOfGroups = 5
**.host*.mobility.numberOfRows = 4
**.host*.mobility.numberOfColumns = 6
**.host*.mobility.maxHostSpeed = 2
**.host*.mobility.minHostSpeed = 0.1
**.host*.mobility.rewiringPeriod = 0s
**.host*.mobility.reshufflePeriod = 300s
**.host*.mobility.targetChoice = "pseudodeterministic"
**.host*.mobility.hcmm = 0.5
**.host*.mobility.drift = 0.01 
**.host*.mobility.expmean = 0.14


