
# results manager design:
# a map with <node,resultclass>
# resultclass: 
#  - udpAppResults: map <int, udpResults> (port,results)
#    - udpResults: <int,int,bool>, (sent, received, inputFiltered) by application. Firewall must update the bool for M2 metric. 
#    

# TESTS TODO
# partial-filtering [WONS1]:
#  - firewall active only in some nodes, rules valid for all
#  - useful in mesh scenarios to test firewalling only in mesh
#  - can not be coupled with strategies for implementation of reduced rule-sets
#  - N nodes with filtering actived
#  - tot - N with applications
#  - OLSR firewalling Off, only static rulesets
#  - metric M2: number of packets received on ad-hoc nodes/total number of packets sent to filtered ports
#   - measure in/out at application level, tell to the results manager which are the filtered ports (they are global), do the total.
# OLSR strategy [WONS2]
#  - apply strategy X to OLSR filtering
#  - all nodes filter with OLSR
#  - measure M1, that is, at each hop postrouting missed/matched
#  - measure M2, no global list of filtered ports, ratio of inputMatched needs to be calculated with no-firewall scenario, there is no way to know what packets have been sent to filtered hosts at destination with variable rule-sets
# OLSR impact on delay:
#  - just measure delay on the application

   
# test all chains:
# - 2 nodi, test target ACCEPT
# - 2 nodi, stesse regole private in output, postrouting
# - 3 nodi, stesse regole private in forward, postrouting
# - 3 nodi, test global routing
# - enforcing in postrouting invece che in forward, grande rete, niente regole in input, full enforcement postroutign.




[Config TestAccept] 

# OK. Accept rules do not get dropped. See Anf and verify that 
# packet to 1301 get accepted and packet to 1302 get dropped

description = "2 nodes with firewall"
*.numHosts = ${nn = 3}
sim-time-limit = 1000s
repeat = 1
**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 2
#debug-on-errors = true

#**.ruleSet = 2
**.firewallFile = "firewallconf/iptablesAccept.conf"

**.constraintAreaSizeX = 50m
**.constraintAreaSizeY = 50m
**.debug = false
**.coreDebug = false
**.host*.**.channelNumber = 0
**.generatorMode = "NodeType"
**.nodeType = "host"
# mobility
**.mobility.initFromDisplayString = false
**.host*.mobilityType = "StationaryMobility"


**.host[*].numUdpApps = 12 # one chat, one sensor requester, 10 sensors

#chat 

**.host[*].udpApp[0].typename = "ChatApp"
#**.host[0].udpApp[0].destAddresses = "255.255.255.255"
**.host[*].udpApp[0].destAddresses = "random(host)"
**.host[*].udpApp[0].localPort = 1234
**.host[*].udpApp[0].destPort = 1234
**.host[*].udpApp[0].stopTime = -1s
**.host[*].udpApp[0].startTime = 30000s
**.host[*].udpApp[0].delayLimit = 5s

#sensors, modelled as simple echo request/response

#servers 

**.host[*].udpApp[1..11].typename = "UDPEchoApp"

**.host[*].udpApp[1..10].startTime = 10000s
**.host[*].udpApp[1].localPort = 1301
**.host[*].udpApp[2].localPort = 1302
**.host[*].udpApp[3].localPort = 1303
**.host[*].udpApp[4].localPort = 1304
**.host[*].udpApp[5].localPort = 1305
**.host[*].udpApp[6].localPort = 1306
**.host[*].udpApp[7].localPort = 1307
**.host[*].udpApp[8].localPort = 1308
**.host[*].udpApp[9].localPort = 1309
**.host[*].udpApp[10].localPort = 1310
**.host[*].udpApp[1..10].destPort = 0
**.host[*].udpApp[1..10].messageLength = 10B
**.host[*].udpApp[1..10].sendInterval = 10000s

#client

**.host[*].udpApp[11].localPort = 1311
**.host[*].udpApp[11].messageLength = 10B
**.host[*].udpApp[11].destPort = uniform(1301, 1311)
**.host[*].udpApp[11].startTime = uniform(30s, 31s)
#**.host[1].udpApp[11].startTime = 10000s
**.host[*].udpApp[11].sendInterval = 2s




[Config TestDrop]
# OK. GLOBAL chain is working. See Anf and verify that 
# packet to 1301, 1302, 1303 are filtered (bu input and output, postoruting)
# all other packets get accepted
# globals miss ratio is ~66% since 1303 is filtered by postrouting (counted as matched)
# but 1304, 1306 are filtered by input (does not count) or by forward (there is no routing here) 

extends = TestAccept
*.numHosts = 2
**.firewallFile = "firewallconf/iptablesDrop.conf"

[Config TestDropMultiHop]
# OK. same as before but miss ratio is 33% since forwarding works 
# here and the central node does only forwarding, so FORWARD chain works  

extends = TestAccept
*.numHosts = 3
**.firewallFile = "firewallconf/iptablesDrop.conf"

**.constraintAreaSizeX = 500m
**.constraintAreaSizeY = 1000m
*.host[0].mobility.initialX = 0m
*.host[0].mobility.initialY = 0m
*.host[1].mobility.initialX = 0m
*.host[1].mobility.initialY = 300m
*.host[2].mobility.initialX = 0m
*.host[2].mobility.initialY = 800m
*.host[0].udpApp[11].destAddresses = "host[2]"
*.host[2].udpApp[11].destAddresses = "host[0]"
*.host[1].udpApp[11].destAddresses = ""
#*.host[*].udpApp[11].destPort = 1303
**.host[1].udpApp[11].startTime = 10000s

[Config TestDropDelay]
# OK. Check that UDP messages have the correct delay (depending on the nunmber of rules) and OLSR messages don't

extends = TestAccept
*.numHosts = 4
**.firewallFile = "firewallconf/iptablesDropDelay.conf"

**.constraintAreaSizeX = 500m
**.constraintAreaSizeY = 1301m
*.host[0].mobility.initialX = 0m
*.host[0].mobility.initialY = 0m
*.host[1].mobility.initialX = 0m
*.host[1].mobility.initialY = 300m
*.host[2].mobility.initialX = 0m
*.host[2].mobility.initialY = 800m
*.host[3].mobility.initialX = 0m
*.host[3].mobility.initialY = 1300m
*.host[0].udpApp[11].destAddresses = "host[3]"
*.host[3].udpApp[11].destAddresses = "host[0]"
*.host[1].udpApp[11].destAddresses = ""
*.host[2].udpApp[11].destAddresses = ""
*.host[*].udpApp[11].destPort = 1302

**.host[0].udpApp[11].startTime = 30s
**.host[0].udpApp[11].stopTime = 1000s
**.host[3].udpApp[11].startTime = 30s
**.host[3].udpApp[11].stopTime = 1000s
**.host[1..2].udpApp[11].startTime = 10000s

**.nodePerformance="test"

[Config TestDropDelayOlsr]
# OK. Check that UDP messages have the correct delay and OLSR messages don't

extends = TestAccept
*.numHosts = 4
**.firewallFile = "firewallconf/iptablesDropDelayOlsr.conf"
**.ruleSet = 0
**.constraintAreaSizeX = 500m
**.constraintAreaSizeY = 1301m
*.host[0].mobility.initialX = 0m
*.host[0].mobility.initialY = 0m
*.host[1].mobility.initialX = 0m
*.host[1].mobility.initialY = 300m
*.host[2].mobility.initialX = 0m
*.host[2].mobility.initialY = 800m
*.host[3].mobility.initialX = 0m
*.host[3].mobility.initialY = 1300m
*.host[0].udpApp[11].destAddresses = "host[3]"
*.host[3].udpApp[11].destAddresses = "host[0]"
*.host[1].udpApp[11].destAddresses = ""
*.host[2].udpApp[11].destAddresses = ""
#*.host[*].udpApp[11].destPort = 1302

**.host[0].udpApp[11].startTime = 1000s
**.host[0].udpApp[11].stopTime = 10000s
**.host[3].udpApp[11].startTime = 30s
**.host[3].udpApp[11].stopTime = 1000s
**.host[1..2].udpApp[11].startTime = 10000s




[Config TestDropLittleArea]

# We implement firewall in OLSR:
# - only a fraction of the packets are delivered since some ports are filtered
# - the delay introduced is linear with the routing table size this can be seen graphically
#   on the RTTcomparison graph. The delay should be around 2*hopcount (note you may need to 
#   set a high delay per hop so that both column have the same scale and use a long-enough simulation)
# - play with nodePerformance and see the delay change :-)  

extends = TestAccept
sim-time-limit = 2000s

**host[*].*.firewallFile = "firewallconf/iptablesDropLittleAreaHost.conf"

# use this for intermediate tests
#**.host[*].*.probFirewallOn = 0


description = "Little scenario, 20 nodes"
*.numHosts = 20
repeat = 1
**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 2
#debug-on-errors = true

#**.firewallFile = "iptables.conf"
#**.manetrouting.ruleSet = 2

**.constraintAreaSizeX = 1200m
**.constraintAreaSizeY = 1200m
**.host[*].udpApp[11].sendInterval = 5s

**.nodePerformance = "MEDIUM"

#**.host[*].wlan[0].radio.transmitterPower = uniform(11.5mW,12.5mW)
**.host[*].wlan[0].radio.transmitterPower = 10mW

#**.Hello_ival = 
#**.Tc_ival = 10



[Config TestObstacles]
# playing with obstacles, 2 nodes, one big obstacle.


extends = TestAccept
*.numHosts = 2
**.firewallFile = ""

**.constraintAreaSizeX = 200m
**.constraintAreaSizeY = 200m
**.constraintAreaSizeZ = 0m

**.obstacles.obstacles = xmldoc("obstacles-ok.xml")
**.obstacleAvoidance = true

#**.obstacleMap.obstacles = xmldoc("obstacles-big.xml")
#**.obstacleMap.obstacles = xmldoc("obstacles-empty.xml")

**.pMax = 300mW
**.wlan[*].radio.transmitterPower = 200mW
**.obstacleMap.debug = true
**.host[*].udpApp[11].sendInterval = 0.2s
**.host[*].udpApp[11].destPort = 1311


**.mobility.initFromDisplayString = false
#**.host*.mobilityType = "StationaryMobility"
**.host[0].mobility.initialX = 1m
**.host[0].mobility.initialY = 1m
**.host[1].mobility.initialX = 190m
**.host[1].mobility.initialY = 199m
**.host[1].mobilityType = "RandomWPMobility"
**.host[0].mobilityType = "StationaryMobility"

**.speed = 15mps 
**.waitTime = 1s
*.annotations.draw = true



[Config TestObstaclesMany]

# playing with obstacles, 20 nodes, a lot of obstacles, randomWP
# I've tried this with tens of obstacles topology and:
# - simulation end without errors
# - all the nodes approx walk the same distance, so nothing wrong happens 

sim-time-limit = 10000s
#extends = TestAccept
*.numHosts = 20
**.firewallFile = ""
repeat = 1

**.constraintAreaSizeX = 1000m
**.constraintAreaSizeY = 1000m
**.constraintAreaSizeZ = 0m

**.obstacles.obstacles = xmldoc("obstacles-20.xml")
**.obstacleAvoidance = true

#**.obstacleMap.obstacles = xmldoc("obstacles-big.xml")
#**.obstacleMap.obstacles = xmldoc("obstacles-empty.xml")

**.pMax = 200mW
**.wlan[*].radio.transmitterPower = 10mW
**.obstacleMap.debug = true
#**.host[*].udpApp[11].sendInterval = 0.2s
#**.host[*].udpApp[11].destPort = 1311

**.host[*].numUdpApp = 0

**.mobility.initFromDisplayString = false
#**.host*.mobilityType = "StationaryMobility"
#**.host[0].mobility.initialX = 1m
#**.host[0].mobility.initialY = 1m
#**.host[1].mobility.initialX = 190m
#**.host[1].mobility.initialY = 199m
**.host[*].mobilityType = "RandomWPMobility"
#**.host[0].mobilityType = "StationaryMobility"

**.host*.routingProtocol = ""

**.speed = 15mps 
**.waitTime = 1s
*.annotations.draw = true


[Config TestObstaclesPerf]

# playing with obstacles how longer is a simulation with obstacles?

# run:
# date > date.txt; for i in `seq 1 10`; do ./create_seeds.sh ; \
# ../firewall/create_obstacles.py 10 100 50 1000 1000 > obstacles-20.xml; \ 
# ./run -u Cmdenv -c TestObstaclesPerf >> /dev/null; done; \
# date >> date.txt
# with and without **.obstacleAvoidance = true. Check the date.txt file
# In my case there is no appreciable difference (better tests need more motivation :-). 

sim-time-limit = 100s
*.numHosts = 20
**.constraintAreaSizeX = 1000m
**.constraintAreaSizeY = 1000m

**.obstacles.obstacles = xmldoc("obstacles-20.xml")
*.annotations.draw = true
**.obstacleAvoidance = true


#**.obstacleMap.obstacles = xmldoc("obstacles-big.xml")
#**.obstacleMap.obstacles = xmldoc("obstacles-empty.xml")

**.wlan[*].radio.transmitterPower = 20mW
#**.obstacleMap.debug = true

**.host[*].udpApp[11].sendInterval = 2s
**.host[*].udpApp[11].destPort = 1301

**.mobility.initFromDisplayString = false

#**.host*.mobilityType = "StationaryMobility"
**.host*.mobilityType = "RandomWPMobility"
**.speed = 15mps 
**.waitTime = 1s

[Config TestObstaclesMusolesi]

# playing with obstacles and musolesi mobility

sim-time-limit = 200s
*.numHosts = ${nn = 20}
**.constraintAreaSizeX = 1000m
**.constraintAreaSizeY = 1000m

**.obstacles.obstacles = xmldoc("obstacles-15.xml")
*.annotations.draw = true
**.obstacleAvoidance = true

**.wlan[*].radio.transmitterPower = 20mW

**.host[*].udpApp[11].sendInterval = 2s
**.host[*].udpApp[11].destPort = 1301

**.mobility.initFromDisplayString = false

**.mobility.initFromDisplayString = false
**.host[*].mobilityType = "MusolesiMobility"
**.host[*].mobility.rewiringProb = 0.1
**.host[*].mobility.connectionThreshold = 0.3
**.host[*].mobility.numHosts = ${nn}
**.host[*].mobility.rewiringPeriod = 0s
**.host[*].mobility.maxHostSpeed = 10
**.host[*].mobility.minHostSpeed = 5
**.host[*].mobility.targetChoice = "pseudodeterministic"
**.host[*].mobility.hcmm = 0.5
**.host[*].mobility.drift = 0.01
**.host[*].mobility.expmean = 0.14


**.host[*].mobility.updateInterval = 2000ms
**.host[*].mobility.numberOfGroups = 4
**.host[*].mobility.numberOfRows = 5
**.host[*].mobility.numberOfColumns = 5
**.host[*].mobility.reshufflePeriod = 100s


[Config TestMultipleRuns]
# playing with obstacles, 2 nodes, one big obstacle.


extends = TestAccept
*.numHosts = 2

repeat = 2

